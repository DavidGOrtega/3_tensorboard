name: train-my-model

on: [push]

jobs:
  # deploy-azure-gpu:
  #   runs-on: [ubuntu-latest]
  #   container: docker://davidgortega/cml:tf3

  #   steps:
  #     - name: deploy
  #       shell: bash
  #       env:
  #         repo_token: ${{ secrets.REPO_TOKEN }} 
  #         AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #         AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  #         AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #       run: |
  #         echo "Deploying..."

  #         RUNNER_LABELS="azure"
  #         RUNNER_REPO="https://github.com/DavidGOrtega/3_tensorboard"
  #         MACHINE="cml$(date +%s)"

  #         docker-machine create \
  #           --driver azure \
  #           --azure-client-id $AZURE_CLIENT_ID \
  #           --azure-client-secret $AZURE_CLIENT_SECRET \
  #           --azure-subscription-id $AZURE_SUBSCRIPTION_ID \
  #           --azure-location "eastus" \
  #           --azure-resource-group $MACHINE \
  #           --azure-size "Standard_NC6" \
  #           --azure-image Canonical:UbuntuServer:18.04-LTS:latest \
  #           $MACHINE

  #         eval "$(docker-machine env --shell sh $MACHINE)"

  #         (
  #         docker-machine ssh $MACHINE "sudo mkdir -p /docker_machine && sudo chmod 777 /docker_machine" && \
  #         docker-machine scp -r -q ~/.docker/machine/ $MACHINE:/docker_machine && \

          
  #         # docker-machine ssh $MACHINE "sudo apt update && sudo apt install -y ubuntu-drivers-common && sudo ubuntu-drivers autoinstall" && \

  #         # docker-machine restart $MACHINE && \
  #         # eval "$(docker-machine env --shell sh $MACHINE)" && \

  #         # docker-machine ssh $MACHINE "curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - && curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu18.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list && sudo apt update && sudo apt install -y nvidia-container-toolkit && sudo systemctl restart docker" && \

  #         docker run --name runner --gpus all -d \
  #           -v /docker_machine/machine:/root/.docker/machine \
  #           -e DOCKER_MACHINE=$MACHINE \
  #           -e repo_token=$repo_token \
  #           -e RUNNER_LABELS=$RUNNER_LABELS \
  #           -e RUNNER_REPO=$RUNNER_REPO \
  #           -e RUNNER_IDLE_TIMEOUT=120 \
  #           davidgortega/cml:tf3 && \

  #         sleep 20 && echo "Deployed $MACHINE"
  #         ) || (docker-machine rm -f $MACHINE && exit 1)

  # ml-azure-gpu:
  #   needs: deploy-azure-gpu
  #   runs-on: [self-hosted,azure]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: cml_run
  #       env:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }} 
  #       run: |
  #         echo "Training..."
  #         echo 'Hi from azure!' >> report.md
  #         nvidia-smi >> report.md
  #         cml-send-comment report.md

  #         # pip3 install -r requirements.txt
  #         # python train.py
          
  #         echo "Trained!"


  # deploy-azure:
  #   runs-on: [ubuntu-latest]
  #   container: docker://davidgortega/cml-runner:latest

  #   steps:
  #     - name: deploy
  #       shell: bash
  #       env:
  #         repo_token: ${{ secrets.REPO_TOKEN }} 
  #         AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #         AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  #         AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #       run: |
  #         echo "Deploying..."

  #         RUNNER_LABELS="azure"
  #         RUNNER_REPO="https://github.com/${GITHUB_REPOSITORY}"
  #         MACHINE="cml$(date +%s)"

  #         docker-machine create \
  #           --driver azure \
  #           --azure-client-id $AZURE_CLIENT_ID \
  #           --azure-client-secret $AZURE_CLIENT_SECRET \
  #           --azure-subscription-id $AZURE_SUBSCRIPTION_ID \
  #           --azure-size "Standard_NC6" \
  #           --azure-image Canonical:UbuntuServer:18.04-LTS:latest \
  #           --azure-location "eastus" \
  #           --azure-resource-group $MACHINE \
  #           $MACHINE

  #         eval "$(docker-machine env --shell sh $MACHINE)" &&

  #         docker run --name runner \
  #           -v /docker_machine/machine:/root/.docker/machine \
  #           -e DOCKER_MACHINE=$MACHINE \
  #           -e repo_token=$repo_token \
  #           -e RUNNER_LABELS=$RUNNER_LABELS \
  #           -e RUNNER_REPO=$RUNNER_REPO \
  #           -e RUNNER_IDLE_TIMEOUT=300 \
  #           davidgortega/cml-runner:latest &&

  #         docker-machine rm -f $MACHINE

  # # register-runner:
  # #   runs-on: [ubuntu-latest]
  # #   container: docker://davidgortega/cml-runner:latest

  # #   steps:
  # #     - name: deploy
  # #       shell: bash
  # #       env:
  # #         repo_token: ${{ secrets.REPO_TOKEN }} 
  # #       run: |
  # #         RUNNER_LABELS="azure"
  # #         RUNNER_REPO="https://github.com/${GITHUB_REPOSITORY}"

  # #         docker run --name runner \
  # #           -e repo_token=$repo_token \
  # #           -e RUNNER_LABELS=$RUNNER_LABELS \
  # #           -e RUNNER_REPO=$RUNNER_REPO \
  # #           -e RUNNER_IDLE_TIMEOUT=1 \
  # #           -e RUNNER_UNREGISTER=n \
  # #           -e RUNNER_NAME=runner \
  # #           davidgortega/cml-runner:latest

  # #         sleep 30

  # ml-azure:
  #   # needs: register-runner
  #   runs-on: [self-hosted,azure]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: cml_run
  #       env:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }} 
  #       run: |
  #         echo "Training..."
  #         echo 'Hi from azure!' >> report.md
  #         echo "Trained!"


  # deploy-aws:
  #   runs-on: [ubuntu-latest]
  #   container: docker://dvcorg/cml-cloud-runner:latest

  #   steps:
  #     - name: deploy
  #       shell: bash
  #       env:
  #         repo_token: ${{ secrets.REPO_TOKEN }} 
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: |
  #         echo "Deploying..."

  #         RUNNER_LABELS="aws"
  #         RUNNER_REPO="https://github.com/DavidGOrtega/3_tensorboard"
  #         MACHINE="cml$(date +%s)"

  #         docker-machine create \
  #           --driver amazonec2 \
  #           --amazonec2-instance-type g4dn.xlarge \
  #           --amazonec2-vpc-id vpc-06bc773d85a0a04f7 \
  #           --amazonec2-ssh-user ubuntu \
  #           --amazonec2-ami ami-085925f297f89fce1 \
  #           $MACHINE

  #         eval "$(docker-machine env --shell sh $MACHINE)"

  #         (
  #         docker-machine ssh $MACHINE "sudo mkdir -p /docker_machine && sudo chmod 777 /docker_machine" && \
  #         docker-machine scp -r -q ~/.docker/machine/ $MACHINE:/docker_machine && \

  #         docker run --name runner --gpus all -d \
  #           -v /docker_machine/machine:/root/.docker/machine \
  #           -e DOCKER_MACHINE=$MACHINE \
  #           -e repo_token=$repo_token \
  #           -e RUNNER_LABELS=$RUNNER_LABELS \
  #           -e RUNNER_REPO=$RUNNER_REPO \
  #           -e RUNNER_IDLE_TIMEOUT=120 \
  #           dvcorg/cml-cloud-runner:latest && \

  #         sleep 20 && echo "Deployed $MACHINE"
  #         ) || (docker-machine rm -f $MACHINE && exit 1)

  # ml-aws:
  #   needs: deploy-aws
  #   runs-on: [self-hosted,aws]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: cml_run
  #       env:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }} 
  #       run: |
  #         echo "Training..."
  #         echo 'Hi from aws!' >> report.md
  #         cml-send-comment report.md
  #         echo "Trained!"


  # deploy-gce:
  #   runs-on: [ubuntu-latest]
  #   container: docker://davidgortega/cml-runner2:latest

  #   steps:
  #     - name: deploy
  #       shell: bash
  #       env:
  #         repo_token: ${{ secrets.REPO_TOKEN }} 
  #         GOOGLE_APPLICATION_CREDENTIALS_DATA: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_DATA }}
  #       run: |
  #         echo "Deploying..."

  #         echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_DATA }}' > gce-credentials.json
  #         export GOOGLE_APPLICATION_CREDENTIALS='gce-credentials.json'

  #         RUNNER_LABELS="gce"
  #         RUNNER_REPO="https://github.com/DavidGOrtega/3_tensorboard"
  #         MACHINE="cml$(date +%s)"

  #         docker-machine create --driver google \
  #           --google-machine-type "n1-standard-4" \
  #           --google-project "cml-project-279709" \
  #           --google-machine-image "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1804-lts" \
  #           --google-accelerator-type "nvidia-tesla-p100" \
  #           --google-accelerator-count 1 \
  #           --google-zone "us-central1-a" \
  #           $MACHINE

  #         eval "$(docker-machine env --shell sh $MACHINE)"

  #         (
  #         docker-machine ssh $MACHINE "sudo mkdir -p /docker_machine && sudo chmod 777 /docker_machine" && \
  #         docker-machine scp -r -q ~/.docker/machine/ $MACHINE:/docker_machine && \

  #         docker-machine scp -q gce-credentials.json $MACHINE:/docker_machine/gce-credentials.json && \

  #         docker-machine ssh $MACHINE "sudo apt update && sudo apt install -y ubuntu-drivers-common && sudo ubuntu-drivers autoinstall" && \
  #         docker-machine ssh $MACHINE "curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - && curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu18.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list && sudo apt update && sudo apt install -y nvidia-container-toolkit && \
  #         docker-machine restart $MACHINE && \
  #         eval "$(docker-machine env --shell sh $MACHINE)" && \

  #         docker run --name runner --gpus all -d \
  #           -v /docker_machine/machine:/root/.docker/machine \
  #           -e DOCKER_MACHINE=$MACHINE \
  #           -e repo_token=$repo_token \
  #           -e RUNNER_LABELS=$RUNNER_LABELS \
  #           -e RUNNER_REPO=$RUNNER_REPO \
  #           -e RUNNER_IDLE_TIMEOUT=30 \
  #           -v /docker_machine/gce-credentials.json:/gce-credentials.json \
  #           -e GOOGLE_APPLICATION_CREDENTIALS='/gce-credentials.json' \
  #           davidgortega/cml-runner2:latest && \

  #         sleep 20 && echo "Deployed $MACHINE"
  #         ) || (docker-machine rm -f $MACHINE && exit 1)

  # ml-gce:
  #   needs: deploy-gce
  #   runs-on: [self-hosted,gce]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: cml_run
  #       env:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }} 
  #       run: |
  #         echo "Training..."
  #         echo 'Hi from Google Cloud!' >> report.md
  #         nvidia-smi >> report.md
  #         cml-send-comment report.md
  #         echo "Trained!"

  # run:
  #   # docker://davidgortega/cml-pyv3
  #   #runs-on: [self-hosted,gpu]
    
  #   runs-on: [ubuntu-latest]
  #   container:
  #     image: docker://davidgortega/cml-dev:contrib
  #     # volumes:
  #     #   - /opt/hostedtoolcache:/opt/hostedtoolcache

  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.x'
          
  #     - name: Display Python version
  #       run: python -c "import sys; print(sys.version)"

# jobs:
#   run:
#     runs-on: [ubuntu-18.04]
#     container: docker://dvcorg/cml-test
#     # container: ubuntu:18.04
#     steps:
#       - uses: actions/checkout@v2

#       # - name: apt
#       #   run: |
#       #       #echo 'APT::Get::Assume-Yes "true";\nAPT::Get::allow-downgrades "true";\nAPT::Get::allow-remove-essential "true";\nAPT::Get::allow-change-held-packages "true";' >> /etc/apt/apt.conf.d/90forceyes
#       #       echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/90assumeyes
            
#       # - name: sudo
#       #   run: |
#       #       apt-get update && apt-get install sudo software-properties-common tzdata
#       #       # ln -fs /usr/share/zoneinfo/US/Pacific-New /etc/localtime && dpkg-reconfigure -f noninteractive tzdata

#       - uses: r-lib/actions/setup-r@master
#       - name: cml_run
#         env:
#           repo_token: ${{ secrets.repo_token }}
#         run: |
#           # Install miic and dependencies
#           # wget -c https://github.com/miicTeam/miic_R_package/archive/v1.4.2.tar.gz
#           # tar -xvzf v1.4.2.tar.gz
#           # cd miic_R_package-1.4.2
#           # R --silent -e "install.packages(c(\"igraph\", \"ppcor\", \"scales\", \"Rcpp\"))"
#           # R CMD INSTALL . --preclean
#           # cd ..
#           # Write your CML report
#           # echo "## Model Metrics" > report.md
#           # cml-send-comment report.md
#           echo 'Works'

# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# jobs:
#   terraform:
#     runs-on: [ubuntu-18.04]
#     steps:
#       - uses: actions/checkout@v2
#       - uses: hashicorp/setup-terraform@v1
#       - uses: actions/cache@v2
#         with:
#           path: terraform.tfstate
#           key: terraform

#       - name: cml_run
#         run: |
#           rm terraform.tfstate
#           terraform init  
#           terraform plan --out plan
#           terraform apply -auto-approve

#   terraform-ends:
#     runs-on: [ubuntu-18.04]
#     needs: terraform
#     steps:
#       - uses: actions/checkout@v2
#       - uses: hashicorp/setup-terraform@v1
#       - uses: actions/cache@v2
#         with:
#           path: terraform.tfstate
#           key: terraform

#       - name: cml_run
#         run: |
#           terraform init  
#           terraform destroy -auto-approve  
        
  deploy-tf:
    runs-on: [ubuntu-latest]
    container: docker://davidgortega/cml:cloud

    steps:
      - name: deploy
        shell: bash
        env:
          repo_token: ${{ secrets.REPO_TOKEN }} 
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        run: |
          echo "Deploying..."
          
          test-cml-cloud-runner \
          --labels=tf \
          --region us-west-1 \
          --idle-timeout=120 \
          --rsa-private-key="-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAxfp/Zy6zivfON+pFDWriHDGbMuKhsJT4XKq8PESxads7RvDf\ndl8qucthgXBGfbENRa+QoLqcOxTbA2mS09C+61otq8ZqqgX1Ry7MGy4aAjs1Stkw\nMAXfTueIw45j2Xg3yHYEUp1v8BpgUU/p8n+8s1lS9IwJlGhnfZi/5ISOE1La2coP\n/OA9iQpiQjSieF/dzN6N7Yqi88Qxe4FWv649oKJ3F3FFzIotP2mHsyzA9ogpBmIy\nFO95XUSsgnjJpjIcT33wfF53F2qjyh1HfGbsC4t7bwObo9kRpVNc51QXPvIuEDG5\nPet5LX9BiDFUQ/b1hropQzkVxH0KqFEL/8QhwQIDAQABAoIBAQCGXwOTw8XGf3Su\nzMl7Vt0Kp7yfp+R4VlPPiW5jNXh40XyFJL12uRblrZ2LXenqK35HmuZ9wMqC6x/P\nTBuEujyqvrUaznvc1FhqrN+JXxv2AbulBo5HOeUbx9gyanVox8iMvVUnwYWVIEHZ\nTnUJyxsHW4wLQPTLjqUXQNKVRkar47FFwYtzYaRjxrIXpNWezPAuAMO4iHJkb/RK\nIQm0zQFcLcb6U5o5IiTf5A9V5ycg9V+nwb0c0boNoUIeElmQsB9gXLIurl9o6hRi\nKF5QItiyoaMLKb1sZ9EeevIats9tIRKGHp8B5CHk8FJIonDenr9Jw2iGzxkCqLwc\nsFZwDYDVAoGBAO+og80e6AxdIjgZZD55D2L4RNU043l/ODxuJjzedfierArIA9sP\nBUlrHVgZ1CPjbtZjRkP/5ejMNyIZGJBt4Kajk7eTF2jasT/OPoJ5CDIoVr/AbsbX\nI6FqdzPxaCMlVJ66L/HH2l2n5YfEzeN2AUsNvqK+aVFGhTt0dMwcsIgrAoGBANN6\na0/6XY4d3RG85b80ACjQAJk6DazXyGOcQGFd6kGJQym0N0778zrZRUFarhQ/jjJ8\ny0VMzouRqUGxIracGVtg8khFFo+r5s81eGdZW8lAV276F3ppj7ciElqeeI3J/obR\nKzdhg5NCgR1mDo8fd8mJXR8hQ9FZyT6t/YIt/7vDAoGBANnQ4tmO+YAjNXKfQUi2\nZpGg646LnyNRyR7DTeWMmtP4Ao1Z9IcoQ7nSrLzh3LkxgA9B8x7ieWb4FDPdc0Hx\nW3iYuyzhdylJekdvf8i9kAFmQFHO59+4sR2H0gdXpTosN5h7yA+LgKAWdLrM2AOf\nwNUiDN2FCdtgqL68vVq1yIw5AoGATQgKjtdjvKCkJhHonf0TEcqybR34XT08gQwp\nZ04ORlD5Zfd/LgYYUxdRYrzlK/r6kOlkIZoYoj4sqQEc4+d4VRC7MBf6X9r99/xC\nH2MtS+Fj98ihRLWu48ZFaTzQLNWnIPSQCVw70SgoX80NAJU1zPN8OBql2VwbMfmu\nnfyjaoECgYEAoerb/XumS3glUyHbgQnpEC8IG3bMG1zUlWC3tlENgfOY/5/KOINp\nhNksXbiB0jVtneJj1+ZEwiUshrsbFmayRmi4yyUigSBYnC9vaQmsRlkyJDLj+paD\nvujfUmH4XxpZHvjCPgLcRtpJH7Cd3qJtX6pU4vW5QoJVdrNZA/RSvBY=\n-----END RSA PRIVATE KEY-----" \
          --image=davidgortega/cml:cloud

  train:
    needs: deploy-tf
    runs-on: [self-hosted,tf]
    #runs-on: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2

      - name: cml_run
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          echo "Training..."
          echo 'Hi from cml! END message' >> report.md
          # nvidia-smi >> report.md
          cml-send-comment report.md
          # sleep 120 

          echo "Trained!"
